## Flox Environment Manifest -----------------------------------------
##
##   _Everything_ you need to know about the _manifest_ is here:
##
##               https://flox.dev/docs/concepts/manifest
##
## -------------------------------------------------------------------
# Flox manifest version managed by Flox CLI
version = 1


## Install Packages --------------------------------------------------
##  $ flox install gum  <- puts a package in [install] section below
##  $ flox search gum   <- search for a package
##  $ flox show gum     <- show all versions of a package
## -------------------------------------------------------------------
[install]
nodejs.pkg-path = "nodejs"
vscode.pkg-path = "vscode"
structurizr-cli.pkg-path = "structurizr-cli"
jdk21.pkg-path = "jdk21"
graphviz.pkg-path = "graphviz"
gum.pkg-path = "gum"


## Environment Variables ---------------------------------------------
##  ... available for use in the activated environment
##      as well as [hook], [profile] scripts and [services] below.
## -------------------------------------------------------------------
[vars]
# INTRO_MESSAGE = "It's gettin' Flox in here"


## Activation Hook ---------------------------------------------------
##  ... run by _bash_ shell when you run 'flox activate'.
## -------------------------------------------------------------------
[hook]
on-activate = '''
#   # -> Set variables, create files and directories
#   # -> Perform initialization steps, e.g. create a python venv
#   # -> Useful environment variables:
#   #      - FLOX_ENV_PROJECT=/home/user/example
#   #      - FLOX_ENV=/home/user/example/.flox/run
#   #      - FLOX_ENV_CACHE=/home/user/example/.flox/cache
  export JAVA_HOME="$(dirname $(dirname $(realpath $(which java))))"
  export PATH="$FLOX_ENV_PROJECT/node_modules/.bin:$PATH"

  # If first time, install the npm packages
  if [ ! -d "$FLOX_ENV_PROJECT/node_modules" ]; then
    do_npm_install() {
      cd "$FLOX_ENV_PROJECT"
      npm install
    }
    export -f do_npm_install
    gum spin --title "Doing npm install..." -- bash -c do_npm_install
  fi

  # Check VSCode extensions
  if [[ "$(code --list-extensions)" != *"c4-dsl-extension"* ]]; then
    do_extensions_install() {
      code --install-extension github.copilot
      code --install-extension github.copilot-chat
      code --install-extension jebbs.plantuml
      code --install-extension systemticks.c4-dsl-extension
      code --install-extension tintinweb.graphviz-interactive-preview
    }
    export -f do_extensions_install
    gum spin --title "Installing VSCode extensions..." -- bash -c do_extensions_install
  fi
'''


## Profile script ----------------------------------------------------
## ... sourced by _your shell_ when you run 'flox activate'.
## -------------------------------------------------------------------
[profile]
# common = '''
#   gum style \
#   --foreground 212 --border-foreground 212 --border double \
#   --align center --width 50 --margin "1 2" --padding "2 4" \
#     $INTRO_MESSAGE
# '''
## Shell-specific customizations such as setting aliases go here:
# bash = ...
# zsh  = ...
# fish = ...


## Services ---------------------------------------------------------
##  $ flox services start             <- Starts all services
##  $ flox services status            <- Status of running services
##  $ flox activate --start-services  <- Activates & starts all
## ------------------------------------------------------------------
[services]
docusaurus.command = "npm start --prefix ./website"


## Include ----------------------------------------------------------
## ... environments to create a composed environment
## ------------------------------------------------------------------
[include]
# environments = [
#     { dir = "../common" }
# ]


## Build and publish your own packages ------------------------------
##  $ flox build
##  $ flox publish
## ------------------------------------------------------------------
[build]
# [build.myproject]
# description = "The coolest project ever"
# version = "0.0.1"
# command = """
#   mkdir -p $out/bin
#   cargo build --release
#   cp target/release/myproject $out/bin/myproject
# """


## Other Environment Options -----------------------------------------
[options]
# Systems that environment is compatible with
# systems = [
#   "aarch64-darwin",
#   "aarch64-linux",
#   "x86_64-darwin",
#   "x86_64-linux",
# ]
# Uncomment to disable CUDA detection.
# cuda-detection = false
